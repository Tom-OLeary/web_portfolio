{"version":3,"sources":["components/Header.js","components/BlogItems.js","components/CardContainer.js","triviaQuestions.js","components/Trivia.js","components/TriviaContainer.js","components/Footer.js","App.js","index.js"],"names":["Header","props","id","className","BlogItems","onClick","e","$","document","ready","zindex","preventDefault","isShowing","hasClass","removeClass","css","zIndex","addClass","entry","created","result","handleCheckCompletion","statusOf","body","class","href","CardContainer","useState","data","setData","useEffect","fetch","url","then","res","json","console","log","map","t","index","title","created_on","questions","shuffledQuestions","questionNumber","playerScore","wrongAttempt","indexNumber","NextQuestion","length","random","Math","floor","includes","push","handleQuestions","currentQuestion","getElementById","innerHTML","question","option1","option2","option3","option4","handleNextQuestion","currentQuestionAnswer","answer","toString","options","getElementsByName","correctOption","forEach","option","value","labels","checked","style","display","backgroundColor","setTimeout","wrongLabelId","checkForAnswer","i","unCheckRadioButtons","remark","remarkColor","playerGrade","color","handleEndGame","closeScoreModal","closeOptionModal","Trivia","setQuestions","a","loadedQuestions","questionData","results","loadedQuestion","formattedQuestion","answerChoices","incorrect_answers","splice","correct_answer","choice","catch","error","getData","type","name","htmlFor","TriviaContainer","target","Footer","data-toggle","data-target","aria-controls","aria-expanded","aria-label","require","config","App","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.0de53fe1.chunk.js","sourcesContent":["import React from \"react\";\nimport '../css/Header.css';\n\n\nexport default function Header(props) {\n    return (\n        <header>\n            <h1 id=\"blog\">Blog</h1>\n            <h3 className=\"mid-header\">Work in Progress...</h3>\n        </header>\n    )\n}","import React from 'react';\nimport '../css/BlogItems.css';\nimport '../css/Header.css';\nimport $ from \"jquery\";\n\nfunction BlogItems(props) {\n    const handleClick = (e) => {\n        $(document).ready(function(){\n              let zindex = 10;\n              e.preventDefault();\n\n              let isShowing = false;\n\n              if ($(\".\"+props.id).hasClass(\"d-card-show\")) {\n                isShowing = true\n              }\n\n              if ($(\"div.dashboard-cards\").hasClass(\"showing\")) {\n                $(\"div.card.d-card-show\")\n                  .removeClass(\"d-card-show\")\n                  .css({zIndex: 1});\n                if (isShowing) {\n                  $(\"div.dashboard-cards\")\n                    .removeClass(\"showing\")\n                } else {\n                  $(\".\"+props.id)\n                    .css({zIndex: zindex})\n                    .addClass(\"d-card-show\");\n                }\n                zindex++;\n\n              } else {\n                $(\"div.dashboard-cards\")\n                  .addClass(\"showing\");\n                $(\".\"+props.id)\n                  .css({zIndex:zindex})\n                  .addClass(\"d-card-show\");\n\n                zindex++;\n              }\n            });\n    }\n\n    const handleCheckCompletion = (props) => {\n        if (props === 'completed') {\n            return <div className='task-count'>\n                ✅\n            </div>;\n        }\n        let result = ''\n        switch (props) {\n            case 'future':\n                result = '🔮️'\n                break\n            case 'info':\n                result = 'ℹ️'\n                break\n            default:\n                result = '❌'\n                break\n        }\n\n        return <div className='task-count'>{result}</div>\n    }\n\n    return (\n        <>\n        <div className={`card col-md-4 ${props.id}`} onClick={handleClick}>\n            <div className='card-title'>\n            <h2>\n                {props.entry}\n                <small>{props.created}</small>\n            </h2>\n            {handleCheckCompletion(props.statusOf)}\n            </div>\n            <div className='card-flap flap1'>\n            <div className='card-description'>\n                <p>{props.body}</p>\n                <ul className='task-list'>\n                <li>\n                    1st Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    2nd Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    3rd Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    4th Task\n                    <span>☑️</span>\n                </li>\n                </ul>\n            </div>\n            <div class='card-flap flap2'>\n                <div className='card-actions'>\n                <a className='btn' href='#'>Close</a>\n                </div>\n            </div>\n            </div>\n        </div>\n        </>\n    )\n\n}\n\nexport default BlogItems;","import React, {useEffect, useState} from \"react\";\nimport '../css/Header.css';\nimport BlogItems from \"./BlogItems\";\n\nexport default function CardContainer(props) {\n    const [data, setData] = useState([])\n\n    useEffect(() => {\n        fetch(props.url)\n            .then(res => res.json())\n            .then(json => {\n                console.log(json);\n                setData(json)\n            })\n    }, []);\n\n    return (\n        <div className=\"grid-container\">\n            <div className=\"middle\">\n                <h2 className=\"mid-header\">Posts</h2>\n                <div className=\"row dashboard-cards\">\n            {data.map((t, index) => <BlogItems statusOf={t.statusOf} entry={t.title} body={t.body} created={t.created_on} id={`id${index}`}/>)}\n                </div>\n            </div>\n            <div className=\"top-description\">\n                <p><strong>Keys:</strong></p>\n                <ul className=\"ul-description\">\n                    <li>❌ → Incomplete Issue or Bug</li>\n                    <li>ℹ️ → Informational Post</li>\n                    <li>🔮️ → Future Updates</li>\n                    <li>✅️ → Completed Issues</li>\n                </ul>\n                <p><strong>Requires Completion:</strong></p>\n                <ul className=\"ul-description\">\n                    <li>Tasks Model for \"Issues\" Posts</li>\n                    <li>Proper Scaling for Different Screen Sizes (CSS is currently structured for a 1400-1600px min-max width)</li>\n                    <li>Add Section to Hold All Solved Issues</li>\n                    <li>Refactor Components Into Smaller, Manageable Items for Re-usability</li>\n                    <li>Reorganize & Bundle CSS</li>\n                    <li>Navbar Collapse Menu Only Works at a Screen Size Below 768px & Needs to be Fixed</li>\n                </ul>\n                <p>More info coming soon as I finish building this page...</p>\n            </div>\n        </div>\n    );\n}","const questions = []\n\nlet shuffledQuestions = [] //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions(data) {\n    //function to shuffle and push 10 questions to shuffledQuestions array\n//app would be dealing with 10questions per session\n    while (shuffledQuestions.length <= 9) {\n        const random = data[Math.floor(Math.random() * data.length)]\n        if (!shuffledQuestions.includes(random)) {\n            shuffledQuestions.push(random)\n        }\n    }\n}\n\n\nlet questionNumber = 1 //holds the current question number\nlet playerScore = 0  //holds the player score\nlet wrongAttempt = 0 //amount of wrong answers picked by player\nlet indexNumber = 0 //will be used in displaying next question\n\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\nexport function NextQuestion(index, data) {\n    handleQuestions(data)\n    questions.push(data)\n    const currentQuestion = shuffledQuestions[index]\n    document.getElementById(\"question-number\").innerHTML = questionNumber\n    document.getElementById(\"player-score\").innerHTML = playerScore\n    document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n    document.getElementById(\"option-one-label\").innerHTML = currentQuestion.option1;\n    document.getElementById(\"option-two-label\").innerHTML = currentQuestion.option2;\n    document.getElementById(\"option-three-label\").innerHTML = currentQuestion.option3;\n    document.getElementById(\"option-four-label\").innerHTML = currentQuestion.option4;\n\n}\n\n\nfunction checkForAnswer() {\n    const currentQuestion = shuffledQuestions[indexNumber] //gets current Question\n    const currentQuestionAnswer = currentQuestion.answer.toString() //gets current Question's answer\n    const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\n    let correctOption = null\n\n    options.forEach((option) => {\n        if (option.value === currentQuestionAnswer) {\n            //get's correct's radio input with correct answer\n            correctOption = option.labels[0].id\n        }\n    })\n\n    //checking to make sure a radio input has been checked or an option being chosen\n    if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked === false) {\n        document.getElementById('option-modal').style.display = \"flex\"\n    }\n\n    //checking if checked radio button is same as answer\n    options.forEach((option) => {\n        if (option.checked === true && option.value === currentQuestionAnswer) {\n            document.getElementById(correctOption).style.backgroundColor = \"green\"\n            playerScore++ //adding to player's score\n            indexNumber++ //adding 1 to index so has to display next question..\n            //set to delay question number till when next question loads\n            setTimeout(() => {\n                questionNumber++\n            }, 1000)\n        }\n\n        else if (option.checked && option.value !== currentQuestionAnswer) {\n            const wrongLabelId = option.labels[0].id\n            document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\n            document.getElementById(correctOption).style.backgroundColor = \"green\"\n            wrongAttempt++ //adds 1 to wrong attempts\n            indexNumber++\n            //set to delay question number till when next question loads\n            setTimeout(() => {\n                questionNumber++\n            }, 1000)\n        }\n    })\n}\n\n\n\n//called when the next button is called\nexport function handleNextQuestion() {\n    checkForAnswer() //check if player picked right or wrong option\n    unCheckRadioButtons()\n    //delays next question displaying for a second just for some effects so questions don't rush in on player\n    setTimeout(() => {\n        if (indexNumber <= 9) {\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\n            NextQuestion(indexNumber)\n        }\n        else {\n            handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\n        }\n        resetOptionBackground()\n    }, 1000);\n}\n\n//sets options background back to null after display the right/wrong colors\nfunction resetOptionBackground() {\n    const options = document.getElementsByName(\"option\");\n    options.forEach((option) => {\n        document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\n    })\n}\n\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\nfunction unCheckRadioButtons() {\n    const options = document.getElementsByName(\"option\");\n    for (let i = 0; i < options.length; i++) {\n        options[i].checked = false;\n    }\n}\n\n// function for when all questions being answered\nfunction handleEndGame() {\n    let remark = null\n    let remarkColor = null\n\n    // condition check for player remark and remark color\n    if (playerScore <= 3) {\n        remark = \"Bad Grades, Keep Practicing.\"\n        remarkColor = \"red\"\n    }\n    else if (playerScore >= 4 && playerScore < 7) {\n        remark = \"Average Grades, You can do better.\"\n        remarkColor = \"orange\"\n    }\n    else if (playerScore >= 7) {\n        remark = \"Excellent, Keep the good work going.\"\n        remarkColor = \"green\"\n    }\n    const playerGrade = (playerScore / 10) * 100\n\n    //data to display to score board\n    document.getElementById('remarks').innerHTML = remark\n    document.getElementById('remarks').style.color = remarkColor\n    document.getElementById('grade-percentage').innerHTML = playerGrade\n    document.getElementById('wrong-answers').innerHTML = wrongAttempt\n    document.getElementById('right-answers').innerHTML = playerScore\n    document.getElementById('score-modal').style.display = \"flex\"\n\n}\n\n//closes score modal, resets game and reshuffles questions\nexport function closeScoreModal() {\n    questionNumber = 1\n    playerScore = 0\n    wrongAttempt = 0\n    indexNumber = 0\n    shuffledQuestions = []\n    document.getElementById('score-modal').style.display = \"none\"\n}\n\n//function to close warning modal\nexport function closeOptionModal() {\n    document.getElementById('option-modal').style.display = \"none\"\n}","import React, {useState, useEffect} from 'react';\nimport '../css/Trivia.css';\nimport {closeScoreModal, closeOptionModal, handleNextQuestion, NextQuestion} from '../triviaQuestions';\n\nfunction Trivia(props) {\n\n    const [questions, setQuestions] = useState([])\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    async function getData() {\n        await fetch('https://opentdb.com/api.php?amount=10&category=18&type=multiple')\n        .then(res => res.json())\n        .then(loadedQuestions => {\n            console.log(loadedQuestions);\n            let questionData = loadedQuestions.results.map(loadedQuestion => {\n                const formattedQuestion = {\n                    question: loadedQuestion.question\n                };\n                const answerChoices = [...loadedQuestion.incorrect_answers];\n                formattedQuestion.answer = Math.floor(Math.random() * 3) + 1;\n                answerChoices.splice(\n                    formattedQuestion.answer - 1, 0, loadedQuestion.correct_answer\n                );\n\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestion[\"option\" + (index + 1)] = choice;\n                });\n                return formattedQuestion;\n            });\n            setQuestions(questionData);\n            console.log(questions);\n        })\n        .catch((error) => console.log(error))\n    }\n\n    return (\n        <div className=\"trivia-left\">\n        <div className=\"modal-container\" id=\"score-modal\">\n            <div className=\"modal-content-container\">\n                <h1>Congratulations, Quiz Completed.</h1>\n                <div className=\"grade-details\">\n                    <p>Attempts : 10</p>\n                    <p>Wrong Answers : <span id=\"wrong-answers\"></span></p>\n                    <p>Right Answers : <span id=\"right-answers\"></span></p>\n                    <p>Grade : <span id=\"grade-percentage\"></span>%</p>\n                    <p ><span id=\"remarks\"></span></p>\n                </div>\n                <div className=\"modal-button-container\">\n                    <button onClick={closeScoreModal}>Continue</button>\n                </div>\n            </div>\n        </div>\n        <div className=\"game-quiz-container-2\">\n            <div className=\"game-details-container\">\n                <h1>Score : <span id=\"player-score\"></span> / 10</h1>\n                <button onClick={() => NextQuestion(0, questions)} id=\"play-button\">Play Trivia</button>\n                <h1> Question : <span id=\"question-number\"></span> / 10</h1>\n            </div>\n            <div className=\"game-question-container\">\n                <h1 id=\"display-question\"></h1>\n            </div>\n            <div className=\"game-options-container\">\n                <div className=\"modal-container\" id=\"option-modal\">\n                    <div className=\"modal-content-container\">\n                        <h1>Please Pick An Option</h1>\n                        <div className=\"modal-button-container\">\n                            <button onClick={closeOptionModal}>Continue</button>\n                        </div>\n                    </div>\n                </div>\n                <span>\n                    <input type=\"radio\" id=\"option-one\" name=\"option\" className=\"radio\" value=\"1\" />\n                    <label htmlFor=\"option-one\" className=\"option\" id=\"option-one-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-two\" name=\"option\" className=\"radio\" value=\"2\" />\n                    <label htmlFor=\"option-two\" className=\"option\" id=\"option-two-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-three\" name=\"option\" className=\"radio\" value=\"3\" />\n                    <label htmlFor=\"option-three\" className=\"option\" id=\"option-three-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-four\" name=\"option\" className=\"radio\" value=\"4\" />\n                    <label htmlFor=\"option-four\" className=\"option\" id=\"option-four-label\"></label>\n                </span>\n            </div>\n            <div className=\"next-button-container\">\n                <button onClick={handleNextQuestion}>Submit</button>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Trivia","import React from \"react\";\nimport '../css/Header.css';\nimport Trivia from \"./Trivia\";\n\n\nexport default function TriviaContainer(props) {\n    return (\n        <div className=\"grid-container-2\">\n            <div className=\"left\">\n                <Trivia />\n            </div>\n            <div className=\"middle top-description\">\n                <p>In order to make this project a little more interesting, I want to include the use of public API's.\n                    To start, I have created a simple trivia game using the <a href=\"https://opentdb.com/api_config.php\" target=\"_blank\">OpenTDB </a>\n                    Trivia Database.\n                </p>\n                <h2 className=\"mid-header\">How It Works:</h2>\n                <p>The OpenTDB API provides access to multiple categories & difficulties as well as the option of multiple\n                    choice or true/false questions.</p>\n                <p>I have set this particular trivia game to 10 multiple choice questions. Using an asynchronous function\n                    within the Trivia.js component, I have collected data for multiple choice Computer Science related\n                    questions.</p>\n                <p>These questions are then formatted and displayed within the trivia game container,\n                    which keeps track of your score and gives you live feedback on your answers.</p>\n                <p>**At this moment the game does function, however it only works for one play-through & will not work a\n                    second time unless the page is refreshed. Right now I am only calling for 10 questions from the API,\n                    as well as missing a function to handle refreshing the questions once the game is complete. This issue\n                    seems as if it will be rather straightforward to fix.</p>\n                <p></p>\n            </div>\n        </div>\n    )\n}","import React from \"react\";\nimport '../css/Footer.css';\n\n\nexport default function Footer(props) {\n    return (\n        <div className=\"footer\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <div className=\"container\">\n                <a className=\"nav-link\" href=\"https://www.troleary.com\">Home</a>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://www.troleary.com/projects\">Projects</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://www.github.com/tom-oleary\" target=\"_blank\">GitHub</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://www.linkedin.com/in/tom-oleary19/\" target=\"_blank\">LinkedIn</a>\n                        </li>\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" href=\"https://www.troleary.com/resume\">Resume</a>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </nav>\n        </div>\n    )\n}","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport CardContainer from \"./components/CardContainer\";\nimport TriviaContainer from \"./components/TriviaContainer\";\nimport Footer from \"./components/Footer\";\nrequire(\"dotenv\").config();\n\n\nfunction App() {\n    let url = ''\n    if (process.env.NODE_ENV === 'development') {\n        url = 'http://127.0.0.1:8000/api/'\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n        url = 'https://www.troleary.com/api/'\n    }\n\n  return (\n    <>\n        <Header />\n        <CardContainer url={url} />\n        <TriviaContainer />\n        <Footer />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#react-root')\n);\n"],"sourceRoot":""}