{"version":3,"sources":["components/BlogItems.js","components/Header.js","triviaQuestions.js","components/Trivia.js","App.js","index.js"],"names":["BlogItems","props","className","id","onClick","e","$","document","ready","zindex","preventDefault","isShowing","hasClass","removeClass","css","zIndex","addClass","entry","created","body","class","href","Header","questions","shuffledQuestions","questionNumber","playerScore","wrongAttempt","indexNumber","NextQuestion","index","data","length","random","Math","floor","includes","push","handleQuestions","currentQuestion","getElementById","innerHTML","question","option1","option2","option3","option4","handleNextQuestion","currentQuestionAnswer","answer","toString","options","getElementsByName","correctOption","forEach","option","value","labels","checked","style","display","backgroundColor","setTimeout","wrongLabelId","checkForAnswer","i","unCheckRadioButtons","remark","remarkColor","playerGrade","color","handleEndGame","closeScoreModal","closeOptionModal","Trivia","useState","setQuestions","a","fetch","then","res","json","loadedQuestions","console","log","questionData","results","map","loadedQuestion","formattedQuestion","answerChoices","incorrect_answers","splice","correct_answer","choice","catch","error","useEffect","getData","type","name","htmlFor","require","config","App","setData","url","t","title","created_on","ReactDOM","render","StrictMode","querySelector"],"mappings":"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","file":"static/js/main.059f72b8.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/BlogItems.css';\nimport '../css/Header.css';\nimport $ from \"jquery\";\n\nfunction BlogItems(props) {\n    const handleClick = (e) => {\n        $(document).ready(function(){\n              let zindex = 10;\n              e.preventDefault();\n\n              let isShowing = false;\n\n              if ($(\".\"+props.id).hasClass(\"d-card-show\")) {\n                isShowing = true\n              }\n\n              if ($(\"div.dashboard-cards\").hasClass(\"showing\")) {\n                $(\"div.card.d-card-show\")\n                  .removeClass(\"d-card-show\");\n\n                if (isShowing) {\n                  $(\"div.dashboard-cards\")\n                    .removeClass(\"showing\");\n                } else {\n                  $(\".\"+props.id)\n                    .css({zIndex: zindex})\n                    .addClass(\"d-card-show\");\n\n                }\n                zindex++;\n\n              } else {\n                $(\"div.dashboard-cards\")\n                  .addClass(\"showing\");\n                $(\".\"+props.id)\n                  .css({zIndex:zindex})\n                  .addClass(\"d-card-show\");\n\n                zindex++;\n              }\n            });\n    }\n\n    return (\n        <>\n        <div className={`card col-md-4 ${props.id}`} onClick={handleClick}>\n            <div className='card-title'>\n            <h2>\n                {props.entry}\n                <small>{props.created}</small>\n            </h2>\n            <div className='task-count'>\n                logo\n            </div>\n            </div>\n            <div className='card-flap flap1'>\n            <div className='card-description'>\n                <p>{props.body}</p>\n                <ul className='task-list'>\n                <li>\n                    1st Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    2nd Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    3rd Task\n                    <span>☑️</span>\n                </li>\n                <li>\n                    4th Task\n                    <span>☑️</span>\n                </li>\n                </ul>\n            </div>\n            <div class='card-flap flap2'>\n                <div className='card-actions'>\n                <a className='btn' href='#'>Close</a>\n                </div>\n            </div>\n            </div>\n        </div>\n        </>\n    )\n\n}\n\nexport default BlogItems;","import React from \"react\";\nimport '../css/Header.css';\n\n\nexport default function Header(props) {\n    return (\n        <header>\n            <h1 id=\"blog\">Blog</h1>\n            <h3 className=\"mid-header\">Work in Progress...</h3>\n        </header>\n    )\n}","const questions = []\n\nlet shuffledQuestions = [] //empty array to hold shuffled selected questions out of all available questions\n\nfunction handleQuestions(data) {\n    //function to shuffle and push 10 questions to shuffledQuestions array\n//app would be dealing with 10questions per session\n    while (shuffledQuestions.length <= 9) {\n        const random = data[Math.floor(Math.random() * data.length)]\n        if (!shuffledQuestions.includes(random)) {\n            shuffledQuestions.push(random)\n        }\n    }\n}\n\n\nlet questionNumber = 1 //holds the current question number\nlet playerScore = 0  //holds the player score\nlet wrongAttempt = 0 //amount of wrong answers picked by player\nlet indexNumber = 0 //will be used in displaying next question\n\n// function for displaying next question in the array to dom\n//also handles displaying players and quiz information to dom\nexport function NextQuestion(index, data) {\n    handleQuestions(data)\n    questions.push(data)\n    const currentQuestion = shuffledQuestions[index]\n    document.getElementById(\"question-number\").innerHTML = questionNumber\n    document.getElementById(\"player-score\").innerHTML = playerScore\n    document.getElementById(\"display-question\").innerHTML = currentQuestion.question;\n    document.getElementById(\"option-one-label\").innerHTML = currentQuestion.option1;\n    document.getElementById(\"option-two-label\").innerHTML = currentQuestion.option2;\n    document.getElementById(\"option-three-label\").innerHTML = currentQuestion.option3;\n    document.getElementById(\"option-four-label\").innerHTML = currentQuestion.option4;\n\n}\n\n\nfunction checkForAnswer() {\n    const currentQuestion = shuffledQuestions[indexNumber] //gets current Question\n    const currentQuestionAnswer = currentQuestion.answer.toString() //gets current Question's answer\n    const options = document.getElementsByName(\"option\"); //gets all elements in dom with name of 'option' (in this the radio inputs)\n    let correctOption = null\n\n    options.forEach((option) => {\n        if (option.value === currentQuestionAnswer) {\n            //get's correct's radio input with correct answer\n            correctOption = option.labels[0].id\n        }\n    })\n\n    //checking to make sure a radio input has been checked or an option being chosen\n    if (options[0].checked === false && options[1].checked === false && options[2].checked === false && options[3].checked === false) {\n        document.getElementById('option-modal').style.display = \"flex\"\n    }\n\n    //checking if checked radio button is same as answer\n    options.forEach((option) => {\n        if (option.checked === true && option.value === currentQuestionAnswer) {\n            document.getElementById(correctOption).style.backgroundColor = \"green\"\n            playerScore++ //adding to player's score\n            indexNumber++ //adding 1 to index so has to display next question..\n            //set to delay question number till when next question loads\n            setTimeout(() => {\n                questionNumber++\n            }, 1000)\n        }\n\n        else if (option.checked && option.value !== currentQuestionAnswer) {\n            const wrongLabelId = option.labels[0].id\n            document.getElementById(wrongLabelId).style.backgroundColor = \"red\"\n            document.getElementById(correctOption).style.backgroundColor = \"green\"\n            wrongAttempt++ //adds 1 to wrong attempts\n            indexNumber++\n            //set to delay question number till when next question loads\n            setTimeout(() => {\n                questionNumber++\n            }, 1000)\n        }\n    })\n}\n\n\n\n//called when the next button is called\nexport function handleNextQuestion() {\n    checkForAnswer() //check if player picked right or wrong option\n    unCheckRadioButtons()\n    //delays next question displaying for a second just for some effects so questions don't rush in on player\n    setTimeout(() => {\n        if (indexNumber <= 9) {\n//displays next question as long as index number isn't greater than 9, remember index number starts from 0, so index 9 is question 10\n            NextQuestion(indexNumber)\n        }\n        else {\n            handleEndGame()//ends game if index number greater than 9 meaning we're already at the 10th question\n        }\n        resetOptionBackground()\n    }, 1000);\n}\n\n//sets options background back to null after display the right/wrong colors\nfunction resetOptionBackground() {\n    const options = document.getElementsByName(\"option\");\n    options.forEach((option) => {\n        document.getElementById(option.labels[0].id).style.backgroundColor = \"\"\n    })\n}\n\n// unchecking all radio buttons for next question(can be done with map or foreach loop also)\nfunction unCheckRadioButtons() {\n    const options = document.getElementsByName(\"option\");\n    for (let i = 0; i < options.length; i++) {\n        options[i].checked = false;\n    }\n}\n\n// function for when all questions being answered\nfunction handleEndGame() {\n    let remark = null\n    let remarkColor = null\n\n    // condition check for player remark and remark color\n    if (playerScore <= 3) {\n        remark = \"Bad Grades, Keep Practicing.\"\n        remarkColor = \"red\"\n    }\n    else if (playerScore >= 4 && playerScore < 7) {\n        remark = \"Average Grades, You can do better.\"\n        remarkColor = \"orange\"\n    }\n    else if (playerScore >= 7) {\n        remark = \"Excellent, Keep the good work going.\"\n        remarkColor = \"green\"\n    }\n    const playerGrade = (playerScore / 10) * 100\n\n    //data to display to score board\n    document.getElementById('remarks').innerHTML = remark\n    document.getElementById('remarks').style.color = remarkColor\n    document.getElementById('grade-percentage').innerHTML = playerGrade\n    document.getElementById('wrong-answers').innerHTML = wrongAttempt\n    document.getElementById('right-answers').innerHTML = playerScore\n    document.getElementById('score-modal').style.display = \"flex\"\n\n}\n\n//closes score modal, resets game and reshuffles questions\nexport function closeScoreModal() {\n    questionNumber = 1\n    playerScore = 0\n    wrongAttempt = 0\n    indexNumber = 0\n    shuffledQuestions = []\n    document.getElementById('score-modal').style.display = \"none\"\n}\n\n//function to close warning modal\nexport function closeOptionModal() {\n    document.getElementById('option-modal').style.display = \"none\"\n}","import React, {useState, useEffect} from 'react';\nimport '../css/Trivia.css';\nimport {closeScoreModal, closeOptionModal, handleNextQuestion, NextQuestion} from '../triviaQuestions';\n\nfunction Trivia(props) {\n\n    const [questions, setQuestions] = useState([])\n\n    useEffect(() => {\n        getData();\n    }, []);\n\n    async function getData() {\n        await fetch('https://opentdb.com/api.php?amount=10&category=18&type=multiple')\n        .then(res => res.json())\n        .then(loadedQuestions => {\n            console.log(loadedQuestions);\n            let questionData = loadedQuestions.results.map(loadedQuestion => {\n                const formattedQuestion = {\n                    question: loadedQuestion.question\n                };\n                const answerChoices = [...loadedQuestion.incorrect_answers];\n                formattedQuestion.answer = Math.floor(Math.random() * 3) + 1;\n                answerChoices.splice(\n                    formattedQuestion.answer - 1, 0, loadedQuestion.correct_answer\n                );\n\n                answerChoices.forEach((choice, index) => {\n                    formattedQuestion[\"option\" + (index + 1)] = choice;\n                });\n                return formattedQuestion;\n            });\n            setQuestions(questionData);\n            console.log(questions);\n        })\n        .catch((error) => console.log(error))\n    }\n\n    return (\n        <div className=\"trivia-left\">\n        <div className=\"modal-container\" id=\"score-modal\">\n            <div className=\"modal-content-container\">\n                <h1>Congratulations, Quiz Completed.</h1>\n                <div className=\"grade-details\">\n                    <p>Attempts : 10</p>\n                    <p>Wrong Answers : <span id=\"wrong-answers\"></span></p>\n                    <p>Right Answers : <span id=\"right-answers\"></span></p>\n                    <p>Grade : <span id=\"grade-percentage\"></span>%</p>\n                    <p ><span id=\"remarks\"></span></p>\n                </div>\n                <div className=\"modal-button-container\">\n                    <button onClick={closeScoreModal}>Continue</button>\n                </div>\n            </div>\n        </div>\n        <div className=\"game-quiz-container\">\n            <div className=\"game-details-container\">\n                <h1>Score : <span id=\"player-score\"></span> / 10</h1>\n                <button onClick={() => NextQuestion(0, questions)} id=\"play-button\">Play Trivia</button>\n                <h1> Question : <span id=\"question-number\"></span> / 10</h1>\n            </div>\n            <div className=\"game-question-container\">\n                <h1 id=\"display-question\"></h1>\n            </div>\n            <div className=\"game-options-container\">\n                <div className=\"modal-container\" id=\"option-modal\">\n                    <div className=\"modal-content-container\">\n                        <h1>Please Pick An Option</h1>\n                        <div className=\"modal-button-container\">\n                            <button onClick={closeOptionModal}>Continue</button>\n                        </div>\n                    </div>\n                </div>\n                <span>\n                    <input type=\"radio\" id=\"option-one\" name=\"option\" className=\"radio\" value=\"1\" />\n                    <label htmlFor=\"option-one\" className=\"option\" id=\"option-one-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-two\" name=\"option\" className=\"radio\" value=\"2\" />\n                    <label htmlFor=\"option-two\" className=\"option\" id=\"option-two-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-three\" name=\"option\" className=\"radio\" value=\"3\" />\n                    <label htmlFor=\"option-three\" className=\"option\" id=\"option-three-label\"></label>\n                </span>\n                <span>\n                    <input type=\"radio\" id=\"option-four\" name=\"option\" className=\"radio\" value=\"4\" />\n                    <label htmlFor=\"option-four\" className=\"option\" id=\"option-four-label\"></label>\n                </span>\n            </div>\n            <div className=\"next-button-container\">\n                <button onClick={handleNextQuestion}>Submit</button>\n            </div>\n        </div>\n        </div>\n    )\n}\n\nexport default Trivia","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport BlogItems from \"./components/BlogItems\";\nimport Header from \"./components/Header\";\nimport Trivia from \"./components/Trivia\";\nrequire(\"dotenv\").config();\n\n\nfunction App() {\n    const [data, setData] = useState([])\n    let url = ''\n    if (process.env.NODE_ENV === 'development') {\n        url = 'http://127.0.0.1:8000/api/'\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n        url = 'https://www.troleary.com/api/'\n    }\n\n    useEffect(() => {\n        fetch(url)\n            .then(res => res.json())\n            .then(json => {\n                console.log(json);\n                setData(json)\n            })\n    }, []);\n\n\n  return (\n    <>\n        <Header />\n        <div className=\"grid-container\">\n            <div className=\"left\">\n                <Trivia />\n            </div>\n            <div className=\"middle\">\n                <h2 className=\"mid-header\">Page Info</h2>\n                <div className=\"row dashboard-cards\">\n            {data.map((t, index) => <BlogItems entry={t.title} body={t.body} created={t.created_on} id={`id${index}`}/>)}\n                </div>\n                <h2 className=\"mid-header\">Future Updates</h2>\n                <p className=\"mid-header\">Posts about upcoming apps/pages will be displayed here...</p>\n            </div>\n        </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#react-root')\n);\n"],"sourceRoot":""}